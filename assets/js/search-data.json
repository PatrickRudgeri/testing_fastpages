{
  
    
        "post0": {
            "title": "Introdução",
            "content": "Sumário . Introdução 1.1. Imports 1.2. Load dataset . | Data Cleaning 2.1. Alterando os tipos 2.2. Missing values 2.3. Observando os dados faltantes 2.4. Derived features . | Descrição dos dados 3.1. Atributos numéricos 3.2. Atributos categóricos 3.3. Vendas . | Imports . import pandas as pd import seaborn as sns import numpy as np import matplotlib.pyplot as plt try: import missingno as msno except: !pip install missingno import missingno as msno from IPython.core.display import HTML from IPython.display import Image, display import warnings warnings.filterwarnings(&quot;ignore&quot;) . %matplotlib inline %pylab inline plt.style.use( &#39;bmh&#39; ) plt.rcParams[&#39;figure.figsize&#39;] = [14, 8] plt.rcParams[&#39;font.size&#39;] = 24 plt.rcParams[&#39;axes.labelsize&#39;] = 14 display( HTML( &#39;&lt;style&gt;.container { width:100% !important; }&lt;/style&gt;&#39;) ) pd.options.display.max_columns = None pd.options.display.max_rows = None pd.set_option( &#39;display.expand_frame_repr&#39;, False ) sns.set() . Populating the interactive namespace from numpy and matplotlib . Load dataset . filename = &quot;trabalho2_dados_27.csv&quot; df = pd.read_csv(filename) df.columns = df.columns.str.replace(&quot;-&quot;, &quot;_&quot;) #substituindo &quot;-&quot; por &quot;_&quot; . df.sample(3) . nome plataforma genero editora vendas lancamento avaliacao_criticos numero_criticos avaliacao_usuarios numero_usuarios fabricante . 586 The Shoot | PS3 | Shooter | Sony Computer Entertainment | 0.30 | 19-Oct-10 | 60.0 | 39.0 | 6.2 | 11.0 | Cohort Studios | . 1596 Crazy Chicken Tales | Wii | Action | Conspiracy Entertainment | 0.06 | 12-Jan-10 | NaN | NaN | tbd | NaN | Conspiracy Entertainment | . 1334 Detective Conan: Prelude from the Past | PSP | Action | Namco Bandai Games | 0.04 | NaN | NaN | NaN | NaN | NaN | NaN | . Dimens&#245;es do dataset . print(&quot;{} instâncias n{} features&quot;.format(*df.shape)) . 1632 instâncias 11 features . Algumas observações sobre os dados: . Há dados faltantes (missing data) | lancamento deve ser convertido para datetime | avaliacao_usuario deve ser convertido para float | plataforma, genero, editora e fabricante podem, inicialmente, ser convertidos para category | . Tipos dos atributos . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 1632 entries, 0 to 1631 Data columns (total 11 columns): # Column Non-Null Count Dtype -- -- 0 nome 1632 non-null object 1 plataforma 1632 non-null object 2 genero 1632 non-null object 3 editora 1628 non-null object 4 vendas 1632 non-null float64 5 lancamento 1122 non-null object 6 avaliacao_criticos 889 non-null float64 7 numero_criticos 889 non-null float64 8 avaliacao_usuarios 1103 non-null object 9 numero_usuarios 831 non-null float64 10 fabricante 1115 non-null object dtypes: float64(4), object(7) memory usage: 140.4+ KB None . Data Cleaning . Alterando os tipos . Conventendo as datas de lançamentos para datetime. Os dados faltantes serão tratados como np.datetime64(&#39;NaT&#39;) (NaT = not a time) . df[&quot;lancamento&quot;] = pd.to_datetime(df[&quot;lancamento&quot;], errors=&quot;coerce&quot;) . Substituí 272 registros rotulados como &quot;tbd&quot; na coluna avaliacao_usuarios por NaN e converti para float . df[&quot;avaliacao_usuarios&quot;] = df[&quot;avaliacao_usuarios&quot;].replace(&quot;tbd&quot;, np.nan).astype(float) . Convertendo plataforma, genero, fabricante e editora para category . cols2cat = [&quot;plataforma&quot;, &quot;genero&quot;, &quot;editora&quot;, &quot;fabricante&quot;] df[cols2cat] = df[cols2cat].astype(&quot;category&quot;) . Atributos com tipos modificados: . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 1632 entries, 0 to 1631 Data columns (total 11 columns): # Column Non-Null Count Dtype -- -- 0 nome 1632 non-null object 1 plataforma 1632 non-null category 2 genero 1632 non-null category 3 editora 1628 non-null category 4 vendas 1632 non-null float64 5 lancamento 1107 non-null datetime64[ns] 6 avaliacao_criticos 889 non-null float64 7 numero_criticos 889 non-null float64 8 avaliacao_usuarios 831 non-null float64 9 numero_usuarios 831 non-null float64 10 fabricante 1115 non-null category dtypes: category(4), datetime64[ns](1), float64(5), object(1) memory usage: 129.8+ KB . Missing values . avaliacao_usuarios, avaliacao_criticos, numero_usuarios e numero_criticos não possuem mais de 45% de seus dados | lancamento e fabricante não possuem ~32% de seus dados | . missing_count = df.isna().sum() missing_percent = round(missing_count / len(df) * 100, 2) missing_df = pd.concat([missing_count, missing_percent], axis=1) missing_df.rename(columns={0:&quot;Missing values&quot;, 1:&quot;% Missing values&quot;}, inplace=True) missing_df.sort_values(by=&quot;Missing values&quot;, ascending=False, inplace=True) only_missing_df = missing_df.query(&quot;`Missing values` &gt; 0&quot;) print(f&quot;# de colunas com missing values:&quot;, len(only_missing_df)) print() only_missing_df . # de colunas com missing values: 7 . Missing values % Missing values . avaliacao_usuarios 801 | 49.08 | . numero_usuarios 801 | 49.08 | . avaliacao_criticos 743 | 45.53 | . numero_criticos 743 | 45.53 | . lancamento 525 | 32.17 | . fabricante 517 | 31.68 | . editora 4 | 0.25 | . Observando os dados faltantes . Em geral, quando o registro possui lancamento igual a NaN, as outras 5 colunas com maiores quantidades de valores faltantes também são NaN. . msno.matrix(df.sort_values(&quot;lancamento&quot;)) plt.title(&quot;Missing Values Viz&quot;, fontsize=24); . Algumas possibilidades de tratamento dos valores faltantes:| . Retirar todas as linhas que possuem algum missing value | Retirar as colunas que possuem muitos dados faltantes | Utilizar técnicas de Imputation | Coletar os valores faltantes e inseri-los no dataset, através de web scraping, por exemplo | . Algumas referências: . How to Handle Missing Data . | How to Handle Missing Data with Python . | 7 Ways to Handle Missing Values in Machine Learning . | . Inicialmente irei optar por excluir todas as linhas que possuem missing values. Definitivamete essa não é a melhor opção e deveria ser modificada nos próximos ciclos. A melhor estratégia para esse conjunto de dados, em minha opnião, é coletar o máximo possível dos dados faltantes através de web scraping de sites como: vgchartz e metacritic (provavelmente essa é a fonte original desse dataset). . df1 = df.dropna() . df1.isna().sum().sum() . 0 . # de linhas após o drop: . df1.shape[0] . 786 . Derived features . Criando variáveis derivadas do dataset original . Extraindo ano e mês do lançamento: . df1[&quot;mes_lancamento&quot;] = df1.lancamento.dt.month df1[&quot;ano_lancamento&quot;] = df1.lancamento.dt.year . Descri&#231;&#227;o dos dados . Intervalo de datas contidas no dataset: . min_date, max_date = df1[&quot;lancamento&quot;].min(), df[&quot;lancamento&quot;].max() print(&quot;De {:%d/%m/%Y} até {:%d/%m/%Y} n n&quot;.format(min_date, max_date)) . De 15/03/2005 até 24/06/2014 . Separando os dados em tipos numéricos e categóricos . num_df = df1.select_dtypes(include=[int, float]) cat_df = df1.select_dtypes(include=[&quot;category&quot;]) print(f&quot;Atributos inteiros: {len(num_df.columns)} =&gt;&quot;, num_df.columns.to_list()) print(f&quot;Atributos categóricos: {len(cat_df.columns)} =&gt;&quot;, cat_df.columns.to_list()) . Atributos inteiros: 7 =&gt; [&#39;vendas&#39;, &#39;avaliacao_criticos&#39;, &#39;numero_criticos&#39;, &#39;avaliacao_usuarios&#39;, &#39;numero_usuarios&#39;, &#39;mes_lancamento&#39;, &#39;ano_lancamento&#39;] Atributos categóricos: 4 =&gt; [&#39;plataforma&#39;, &#39;genero&#39;, &#39;editora&#39;, &#39;fabricante&#39;] . Atributos num&#233;ricos . Estatisticas b&#225;sicas . print(num_df.describe().T.drop(&quot;count&quot;, axis=1)) . mean std min 25% 50% 75% max vendas 1.038448 3.526361 0.01 0.160 0.4 0.95 81.84 avaliacao_criticos 69.559796 13.998803 19.00 60.250 72.0 80.00 98.00 numero_criticos 36.049618 21.906549 4.00 18.000 34.0 51.00 105.00 avaliacao_usuarios 6.943130 1.453328 0.70 6.225 7.3 8.00 9.50 numero_usuarios 137.834606 363.252043 4.00 13.000 31.0 95.75 3781.00 mes_lancamento 7.198473 3.412797 1.00 4.000 8.0 10.00 12.00 ano_lancamento 2009.328244 2.144854 2005.00 2008.000 2009.0 2011.00 2014.00 . An&#225;lise univariada . Algumas observações: . É possível notar que o atributo vendas possui muitos outliers e que seus valores estão concentrados entre 0.15 e 1; | As avaliações dos críticos tendem a ser mais conservadoras do que a dos usuários. | A maior quantidade de lançamentos ocorreram em 2009 | . def boxplot(col_name, xlabel=None, mean=True, ax=None, log=False): data = num_df.loc[:, col_name] ax = sns.boxplot(data, ax=ax) ax.tick_params(axis=&quot;x&quot;, labelsize=14) if mean: ax.scatter(data.mean(), 0, marker=&#39;o&#39;, s=80, color=&quot;r&quot;) if log: ax.set(xscale=&quot;log&quot;) if xlabel is not None: ax.set(xlabel=xlabel) fig, axs = plt.subplots(3,3) boxplot(&quot;vendas&quot;, xlabel=&quot;vendas (Milhões de unidades) n(log)&quot;, ax=axs[0,0], log=True) boxplot(&quot;avaliacao_criticos&quot;, ax=axs[0,1]) boxplot(&quot;numero_criticos&quot;, ax=axs[0,2]) boxplot(&quot;mes_lancamento&quot;, ax=axs[1,0]) boxplot(&quot;avaliacao_usuarios&quot;, ax=axs[1,1]) boxplot(&quot;numero_usuarios&quot;, xlabel=&quot;numero_usuarios (log)&quot;, ax=axs[1,2], log=True) boxplot(&quot;ano_lancamento&quot;, ax=axs[2,0]) fig.delaxes(axs[2,1]) fig.delaxes(axs[2,2]) fig.suptitle(&quot;Boxplots dos atributos numéricos&quot;, fontsize=24) fig.tight_layout() plt.show() . An&#225;lise multivariada . Scatter plot . O mês preferido para lançamentos é outubro | . sns.pairplot(num_df, diag_kind=&#39;kde&#39;, height=1.8, corner=True) plt.suptitle(&quot;Relações entre as variáveis&quot;, fontsize=24) plt.tight_layout() plt.show() . &lt;/br&gt; &lt;/br&gt; . Matriz de correlação . As avaliações dos usuários e críticos possuem uma correlação positiva razoável | . corr = num_df.corr() mask = np.zeros_like(corr) mask[np.triu_indices_from(mask)] = True sns.heatmap(corr, annot=True, mask=mask, cmap=&quot;Blues&quot;) plt.title(&quot;Correlação entre os atributos numéricos&quot;, fontsize=24) plt.xticks(rotation=75) plt.show() . Atributos categ&#243;ricos . Descri&#231;&#227;o b&#225;sica dos dados categ&#243;ricos . cat_df.describe().drop(&quot;count&quot;, axis=0) . plataforma genero editora fabricante . unique 9 | 12 | 73 | 368 | . top X360 | Action | Electronic Arts | EA Canada | . freq 249 | 191 | 121 | 29 | . def countplot(col_name, title=None, order=True, top=None): top_ordered = cat_df[col_name].value_counts()[:top] ax = sns.countplot(cat_df[col_name], order=top_ordered.index) for bar in ax.patches: x = bar.get_x() + bar.get_width() / 2 height = bar.get_height() ax.text(x, height, f&quot;{height} n({height/len(cat_df):.2%})&quot;, ha=&#39;center&#39;, va=&#39;bottom&#39;, fontsize=15) plt.title(title, fontsize=24) plt.ylim(0, plt.ylim()[1]+10) plt.tight_layout() return plt . Quantidade de lan&#231;amentos por plataforma . ~60% do total de lançamentos foram de games do Xbox 360 e do PS3 | PS4 e Xbox One foram lançados no final de 2013, por esse motivo possuem poucos lançamentos registrados no dataset | . countplot(&quot;plataforma&quot;, title=&quot;Lançamentos por plataformas&quot;).show() . Quantidade de lan&#231;amentos por g&#234;nero . Os gêneros mais lançados são de ação, esportes e jogos de tiro | Puzzle e estratégia possuem poucos lançamentos | . countplot(&quot;genero&quot;, title=&quot;Gêneros&quot;).show() . Quantidade de lan&#231;amentos por editora . A editora EA lidera o ranking de lançamentos, seguido por Ubisoft, Activision e sony. Juntas essas editoras possuem ~ 39% do total de lançamentos | . countplot(&quot;editora&quot;, title=&quot;Editoras - top 15&quot;, top=15) plt.xticks(rotation=60) plt.show() . Quantidade de lan&#231;amentos por fabricante . countplot(&quot;fabricante&quot;, title=&quot;Fabricantes - top 15&quot;, top=15) plt.xticks(rotation=60) plt.show() . Vendas . Total de vendas por plataforma . Nintendo Wii, PS3 e XBox 360 foram responsáveis por ~90% das vendas dos games contidos nesse dataset | . total_vendas = df1[[&quot;vendas&quot;, &quot;plataforma&quot;]].groupby(&quot;plataforma&quot;).sum() vendas_por_plataforma = total_vendas.sort_values(&quot;vendas&quot;, ascending=False) # vendas_por_plataforma ax = sns.barplot(data=vendas_por_plataforma.reset_index(), x=&quot;plataforma&quot;, y=&quot;vendas&quot;, order=vendas_por_plataforma.index) for bar in ax.patches: x = bar.get_x() + bar.get_width() / 2 height = bar.get_height() ax.text(x, height, f&quot;{height:.2f} n({(height/total_vendas.sum().values[0])*100:.2f}%)&quot;, ha=&#39;center&#39;, va=&#39;bottom&#39;, fontsize=15) plt.title(&quot;Total de Vendas por plataforma&quot;, fontsize=24) plt.ylabel(&quot;Vendas (Milhões de unidades)&quot;) plt.ylim(0, plt.ylim()[1]+10) plt.tight_layout() plt.show() . Jogos mais vendidos . Wii sports vendeu mais de 81 milhões de unidades, seguido por Wii play com ~29 milhões e New Super Mario Bros com mais de 27 milhões | Em 4º lugar GTA V para PS3 com 16,7 milhões de unidades vendidas | . df[[&quot;vendas&quot;, &quot;nome&quot;, &quot;plataforma&quot;]].nlargest(10, columns=[&quot;vendas&quot;]) . vendas nome plataforma . 374 81.84 | Wii Sports | Wii | . 143 28.79 | Wii Play | Wii | . 561 27.25 | New Super Mario Bros. Wii | Wii | . 872 16.71 | Grand Theft Auto V | PS3 | . 272 12.57 | Call of Duty: Black Ops II | X360 | . 1588 12.08 | Call of Duty: Black Ops | PS3 | . 216 10.31 | Call of Duty: Modern Warfare 2 | PS3 | . 1256 10.05 | Grand Theft Auto IV | PS3 | . 294 9.28 | Super Mario 3D Land | 3DS | . 1320 8.94 | Halo 4 | X360 | . Vendas durante os anos . 2009 foi o ano com maior quantidade de unidades vendidas | o ano de 2014 está incompleto no dataset, logo não deve ser considerado para fins de comparação | . ax = sns.barplot(data=num_df.groupby(&quot;ano_lancamento&quot;, as_index=False).sum(), x=&quot;ano_lancamento&quot;, y=&quot;vendas&quot;) for bar in ax.patches: x = bar.get_x() + bar.get_width() / 2 height = bar.get_height() ax.text(x, height, f&quot;{height:.2f}&quot;, ha=&#39;center&#39;, va=&#39;bottom&#39;, fontsize=15) plt.title(&quot;Total de Vendas por ano de lançamento&quot;, fontsize=24) plt.ylabel(&quot;Vendas (Milhões de unidades)&quot;) plt.tight_layout() plt.show() .",
            "url": "https://patrickrudgeri.github.io/testing_fastpages/2021/01/20/games-analysis.html",
            "relUrl": "/2021/01/20/games-analysis.html",
            "date": " • Jan 20, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://patrickrudgeri.github.io/testing_fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://patrickrudgeri.github.io/testing_fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://patrickrudgeri.github.io/testing_fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://patrickrudgeri.github.io/testing_fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}